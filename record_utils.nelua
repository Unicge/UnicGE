-- Define uma macro que cria um novo tipo record 

macro new_record(base: type?, name: string): type 
   
-- Cria um novo tipo record com o nome dado 

  local newtype = @record{} 

newtype.name = name 

-- Se houver um tipo base, copia seus campos e métodos para o novo tipo 

if base then 

-- Indica que o novo tipo herda do tipo base 

    newtype < base 

 -- Copia os campos do tipo base para o novo tipo usando a macro copy_fields 

##copy_fields(base, newtype) 
 
-- Copia os métodos do tipo base para o novo tipo usando a macro copy_methods 

##copy_methods(base.methods, newtype.methods) 
   
end 
 
-- Retorna o novo tipo record criado pela macro  
  return newtype  
end 
 
-- Define uma macro auxiliar que copia os campos de um record para outro  
macro copy_fields(from: type, to: type) 

-- Percorre os campos do record de origem usando a função pairs  
  
for fieldname, fieldtype in pairs(from) do 
 
  -- Ignora o campo name  

    if fieldname ~= 'name' then 

-- Atribui o mesmo campo e tipo ao record de destino usando a sintaxe #[] 
       
to#[fieldname] = fieldtype 
   end 
  end 
end 
 
-- Define uma macro auxiliar que copia os métodos de um record para outro  

macro copy_methods(from: table, to: table) 
   
-- Percorre os métodos do record de origem usando a função pairs  

  for methodname, method in pairs(from) do 
     
-- Atribui o mesmo método ao record de destino usando a sintaxe #[] 

    to#[methodname] = method 
  end   
end 

-- Define a classe Entity usando a macro new_record sem passar um tipo base  

local Entity = ##new_record(nil, 'Entity') 
 
-- Define um campo components na classe Entity para armazenar os componentes anexados à entidade  

Entity.components: {[string]: any} 

-- Define um método init na classe Entity para inicializar os componentes da entidade  
function Entity:init() 
  self.components = {} 
end 
 
-- Define um método add_component na classe Entity para adicionar um componente à entidade  

function Entity:add_component(name: string, component: any) 
  self.components[name] = component  
end 
 
-- Define um método get_component na classe Entity para obter um componente da entidade pelo nome  
 
function Entity:get_component(name: string): any? 
  return self.components[name] 
end 

-- Retorna a classe Entity definida pelo código  
 
return Entity 